syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Todo service";
        version: "1.0";
        contact: {
            name: "go-grpc-http-rest-microservice project";
            url: "https://github.com/hamitb/go-grpc-http-rest-microservice";
            email: "hamitburakemre@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

// Todo structure
message Todo {
    // Unique integer identifier
    int64 id = 1;
    // Title of the task
    string title = 2;
    // Detailed description of the todo
    string description = 3;
    // Date and time to remind the todo
    google.protobuf.Timestamp reminder = 4;
}

// Request data to create new todo task
message CreateRequest {
    // API versioning
    string api = 1;
    // Task entity to add
    Todo todo = 2;
}

// Response that contains data for created todo task
message CreateResponse {
    // API versioning
    string api = 1;
    // ID of created task
    int64 id = 2;
}

message ReadRequest {
    // API versioning
    string api = 1;
    // Unique integer id of the task
    int64 id = 2;
}

message ReadResponse {
    // API Versioning
    string api = 1;
    // Returned todo
    Todo todo = 2;
}

message UpdateRequest {
    // API Versioning
    string api = 1;
    // Todo to update
    Todo todo = 2;
}

message UpdateResponse {
    // API Versioning
    string api = 1;
    // Number of entities updated
    int64 updated = 2;
}

message DeleteRequest {
    // API Versioning
    string api = 1;
    // Unique todo id
    int64 id = 2;
}

message DeleteResponse {
    // API Versioning
    string api = 1;
    // Number of entities deleted
    int64 deleted = 2;
}

message ReadAllRequest {
    // API versioning
    string api = 1;
} 

message ReadAllResponse {
    // API Versioning
    string api = 1;
    // List of all todos
    repeated Todo todos = 2;
}

// Service to manage list of todo tasks
service TodoService {
    // Create new todo
    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/v1/todo"
            body: "*"
        };
    };

    // Read todo
    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/todo/{id}"
        };
    };

    // Update todo
    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/todo/{todo.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/todo/{todo.id}"
                body: "*"
            }
        };
    };

    // Delete todo
    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/todo/{id}"
        };
    };

    // Read all todos
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse);
}